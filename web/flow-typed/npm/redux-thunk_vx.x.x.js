// flow-typed signature: 676f950ac84351a9c73f33a6bb85f4ae
// flow-typed version: <<STUB>>/redux-thunk_v2.2.0/flow_v0.66.0

/**
 * This is an autogenerated libdef stub for:
 *
 *   'redux-thunk'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

import {
  Action,
  Middleware
} from "redux";

declare module "redux-thunk" {
  declare export type AnyAction = { type: any };

  /**
   * The dispatch method as modified by React-Thunk; overloaded so that you can
   * dispatch:
   *    - standard (object) actions: `dispatch()` returns the action itself
   *    - thunk actions: `dispatch()` returns the thunk's return value
   * @template The redux state
   * @template The extra argument passed to the inner function of
   * thunks (if specified when setting up the Thunk middleware)
   * @template The (non-thunk) actions that can be dispatched.
   */
  declare export interface ThunkDispatch<TState, TExtraThunkArg, TBasicAction: Action> {
    <TReturnType>(
      thunkAction: ThunkAction<TReturnType, TState, TExtraThunkArg, TBasicAction>
    ): TReturnType;
    <A: TBasicAction>(action: A): A;
    <TReturnType, TAction: TBasicAction>(
      action:
        | TAction
        | ThunkAction<TReturnType, TState, TExtraThunkArg, TBasicAction>
    ): TAction | TReturnType;
  }
  /**
   * A "thunk" action (a callback function that can be dispatched to the Redux
   * store.)
   *
   * Also known as the "thunk inner function", when used with the typical pattern
   * of an action creator function that returns a thunk action.
   * @template The return type of the thunk's inner function
   * @template The redux state
   * @template Optional extra argument passed to the inner function
   * (if specified when setting up the Thunk middleware)
   * @template The (non-thunk) actions that can be dispatched.
   */
  declare export type ThunkAction<
    TReturnType,
    TState,
    TExtraThunkArg,
    TBasicAction: Action
  > = (
    dispatch: ThunkDispatch<TState, TExtraThunkArg, TBasicAction>,
    getState: () => TState,
    extraArgument: TExtraThunkArg
  ) => TReturnType;
  /**
   * A generic type that takes a thunk action creator and returns a function
   * signature which matches how it would appear after being processed using
   * bindActionCreators(): a function that takes the arguments of the outer
   * function, and returns the return type of the inner "thunk" function.
   * @template Thunk action creator to be wrapped
   */
  declare export type ThunkActionDispatch<
    TActionCreator: (...args: any[]) => ThunkAction<any, any, any, any>
  > = (
    ...args: Parameters<TActionCreator>
  ) => $Call<
    <R>((...args: any[]) => R) => R,
    $Call<<R>((...args: any[]) => R) => R, TActionCreator>
  >;
  /**
   * @template The redux state
   * @template The (non-thunk) actions that can be dispatched
   * @template An optional extra argument to pass to a thunk's
   * inner function. (Only used if you call `thunk.withExtraArgument()`)
   */
  declare export type ThunkMiddleware<
    TState = { ... },
    TBasicAction: Action = AnyAction,
    TExtraThunkArg = void
  > = Middleware<
    ThunkDispatch<TState, TExtraThunkArg, TBasicAction>,
    TState,
    ThunkDispatch<TState, TExtraThunkArg, TBasicAction>
  >;
  declare var thunk: ThunkMiddleware<> & {
    withExtraArgument<TExtraThunkArg, TState, TBasicAction: Action<any>>(
      extraArgument: TExtraThunkArg
    ): ThunkMiddleware<TState, TBasicAction, TExtraThunkArg>,
    ...
  };
  declare export default typeof thunk;
}
